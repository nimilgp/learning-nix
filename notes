nix repl -> read-eval-print-loop  (for interactive practice)
nix-instantiate --eval nixfilename (to eval a file)

# Nix is :

		* purely functional ->
				- no seq of steps
				- eval nix expr returns a single data struct
				- nix file eval to a single expr

		* lazy ->
				- eval expr only when it is req

# data types :

		* numbers
				17
				3.14

		* strings & paths
				"yooooooo"
				./dir1/subdir2/filename		(no quotations used)

		* lists
				[ 1 1 2 3 5 8 13 ]    (no commas for sep)

		* attribute sets
				{ gamename = "sotc"; director = "fumito ueda"; }


# operators :
		
		* numeric op -> + - * /  (division is floor div)
		* string cat -> +
		* list cat -> ++
		* compare -> the ussual
		* logical implication e1 -> e2  (!e1 || e2)
		
		* merge op
				{ day = "friday"; date = 3; month = "may"; } // { year = 2024; }
	
# var binding (immutable) :
		let 
		a = 1;
		b = 2;
		in a + b   => 3

# builtins :
		
		* typeOf()
		* isInt()   // isType()

# functions (anon lambdas , ie treated like data) :

		lambda functions
		* (x: x * x) 5 => 25
		* (x: y: x - y) 3 5 => -2
		* (name: age: "${name} is ${toString age} years old") "nimil" 21
		* funchello = (name: "hello ${name}"), funchello "nimil" => "hello nimil" 
		* let                (the let in syntax)
          mult = (a: b: a * b);
          doubleit = (mult 2);
          in
          doubleit 8 => 16

# multiple args (attr sets)
		* ellipsis syntax
		let 
		func = { name, age, ...}: "${name} hello";         
        person = { name = "nimil"; age = 20; email ="me@nimil.com";};
        in 
		func person
		
		* @ syntax
		({a, b, ...}@args: args.b) {a = 5; b = 10; c = 15;} => 10

# if then else
		if 5 > 2
        then "yup, it is the truth"
        else "lies"

# inherit
		let x = 123; in
		{
		inherit x;
		y = 456;
		}                   => {x = 123; y= 456;}

# with
		let attrs = { a = 15; b = 2; };
		in with attrs; a + b   => 17


